{"version":3,"file":"index_test.js","sourceRoot":"","sources":["../src/index_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAC5C,OAAO,EAAC,eAAe,EAAE,aAAa,EAAE,SAAS,EAAE,IAAI,EAAC,MAAM,uBAAuB,CAAC;AACtF,gDAAgD;AAChD,OAAO,EAAC,QAAQ,EAAE,YAAY,EAAE,iBAAiB,EAAC,MAAM,yCAAyC,CAAC;AAElG,OAAO,EAAC,IAAI,EAAE,aAAa,EAAC,MAAM,gBAAgB,CAAC;AACnD,OAAO,EAAC,WAAW,EAAE,WAAW,EAAE,YAAY,EAAC,MAAM,SAAS,CAAC;AAE/D;;;;GAIG;AACH,iBAAiB,CAAC,iBAAiB,EAAE,QAAQ,EAAE,GAAG,EAAE;IAClD,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;QAC/D,MAAM,OAAO,GAAG,EAAE,CAAC,OAAO,EAAiB,CAAC;QAC5C,MAAM,IAAI,GAAG,GAAG,CAAC;QACjB,qEAAqE;QACrE,MAAM,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5B,MAAM,UAAU,GAAG,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;QACtD,EAAE,CAAC,OAAO,EAAE,CAAC;QAEb,2EAA2E;QAC3E,MAAM,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5B,MAAM,UAAU,GAAG,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;QACtD,6CAA6C;QAC7C,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAC/B,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,EAAE,CAAC,CAAC;QACnC,MAAM,IAAI,GAAG,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAEtD,0BAA0B;QAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACpC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;SACnB;QAED,MAAM,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC1B,8BAA8B;QAC9B,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,iBAAiB,CAAC,WAAW,EAAE,YAAY,EAAE,GAAG,EAAE;IAChD,UAAU,CAAC,GAAG,EAAE;QACd,eAAe,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YACtC,MAAM,EAAC,IAAI,EAAC,GAAG,MAAM,IAAI,EAAE,CAAC;YAC5B,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,EAAE,GAAG,CAAC,CAAC;QAER,0CAA0C;QAC1C,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACvB,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,aAAa,EAAE,CAAC;QAChB,aAAa,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,WAAW,CAAC,cAAc,CAAC,CAAC;QAC5B,IAAI,QAAgB,CAAC;QACrB,MAAM,SAAS,GAAG,KAAK,CAAC;QACxB,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;YACjD,QAAQ,GAAG,IAAI,CAAC;YAChB,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrD,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD;QAClD,mBAAmB,EACvB,KAAK,IAAI,EAAE;QACT,YAAY,CAAC,iBAAiB,CAAC,CAAC;QAChC,IAAI,QAAgB,CAAC;QACrB,MAAM,SAAS,GAAG,KAAK,CAAC;QACxB,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;YACjD,QAAQ,GAAG,IAAI,CAAC;YAChB,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrD,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,sDAAsD;QAClD,oBAAoB,EACxB,KAAK,IAAI,EAAE;QACT,YAAY,CAAC;YACX,wBAAwB,EAAE,cAAc;YACxC,6BAA6B,EAAE,cAAc;YAC7C,sCAAsC,EAAE,cAAc;SACvD,CAAC,CAAC;QACH,IAAI,cAAsB,CAAC;QAC3B,MAAM,SAAS,GAAG,KAAK,CAAC;QACxB,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;YACjD,cAAc,GAAG,IAAI,CAAC;YACtB,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrD,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,sEAAsE;QAClE,aAAa,EACjB,KAAK,IAAI,EAAE;QACT,MAAM,CAAC,GAAG,EAAE;YACV,YAAY,CAAC;gBACX,wBAAwB,EAAE,uCAAuC;aAClE,CAAC,CAAC;QACL,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;IACf,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,kEAAkE,EAClE,KAAK,IAAI,EAAE;QACT,MAAM,gBAAgB,GAAG,IAAI,CAAC;QAC9B,MAAM,WAAW,GAAG,iBAAiB,CAAC;QACtC,YAAY,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;QAC5C,IAAI,QAAgB,CAAC;QACrB,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QAC7B,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;YACjD,QAAQ,GAAG,IAAI,CAAC;YAChB,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpD,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC;YACzB,WAAW,GAAG,wBAAwB;YACtC,WAAW,GAAG,6BAA6B;YAC3C,WAAW,GAAG,sCAAsC;SACrD,CAAC,CAAC;QACH,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,oEAAoE;QAChE,sBAAsB,EAC1B,KAAK,IAAI,EAAE;QACT,MAAM,gBAAgB,GAAG,IAAI,CAAC;QAC9B,MAAM,WAAW,GAAG,iBAAiB,CAAC;QACtC,YAAY,CACR;YACE,wBAAwB,EAAE,uCAAuC;YACjE,6BAA6B,EACzB,4CAA4C;YAChD,sCAAsC,EAClC,qDAAqD;SAC1D,EACD,gBAAgB,CAAC,CAAC;QACtB,IAAI,QAAgB,CAAC;QACrB,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QAC7B,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;YACjD,QAAQ,GAAG,IAAI,CAAC;YAChB,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpD,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC;YACzB,WAAW,GAAG,wBAAwB;YACtC,WAAW,GAAG,6BAA6B;YAC3C,WAAW,GAAG,sCAAsC;SACrD,CAAC,CAAC;QACH,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,kEAAkE,EAClE,KAAK,IAAI,EAAE;QACT,MAAM,gBAAgB,GAAG,IAAI,CAAC;QAC9B,MAAM,SAAS,GAAG,uCAAuC,CAAC;QAC1D,WAAW,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;QACzC,IAAI,QAAgB,CAAC;QACrB,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QAC7B,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;YACjD,QAAQ,GAAG,IAAI,CAAC;YAChB,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpD,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEN,iEAAiE;IACjE,gCAAgC;IAChC,GAAG,CAAC,oEAAoE,EACpE,KAAK,IAAI,EAAE;QACT,MAAM,gBAAgB,GAAG,IAAI,CAAC;QAC9B,WAAW,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAC9C,IAAI,QAAgB,CAAC;QACrB,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QAC7B,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;YACjD,QAAQ,GAAG,IAAI,CAAC;YAChB,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrD,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEP,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,uBAAuB;QACvB,WAAW,CAAC,cAAc,CAAC,CAAC;QAC5B,MAAM,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAEjC,6BAA6B;QAC7B,MAAM,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;aAChC,YAAY,CAAC,qDAAqD,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {registerBackend, removeBackend, test_util, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line:no-imports-from-dist\nimport {ALL_ENVS, BROWSER_ENVS, describeWithFlags} from '@tensorflow/tfjs-core/dist/jasmine_util';\n\nimport {init, resetWasmPath} from './backend_wasm';\nimport {BackendWasm, setWasmPath, setWasmPaths} from './index';\n\n/**\n * Tests specific to the wasm backend. The name of these tests must start with\n * 'wasm' so that they are always included in the test runner. See\n * `env.specFilter` in `setup_test.ts` for details.\n */\ndescribeWithFlags('wasm read/write', ALL_ENVS, () => {\n  it('write and read values', async () => {\n    const x = tf.tensor1d([1, 2, 3]);\n    test_util.expectArraysClose([1, 2, 3], await x.data());\n  });\n\n  it('allocate repetitively and confirm reuse of heap space', () => {\n    const backend = tf.backend() as BackendWasm;\n    const size = 100;\n    // Allocate for the first time, record the memory offset and dispose.\n    const t1 = tf.zeros([size]);\n    const memOffset1 = backend.getMemoryOffset(t1.dataId);\n    t1.dispose();\n\n    // Allocate again and make sure the offset is the same (memory was reused).\n    const t2 = tf.zeros([size]);\n    const memOffset2 = backend.getMemoryOffset(t2.dataId);\n    // This should fail in case of a memory leak.\n    expect(memOffset1).toBe(memOffset2);\n  });\n\n  it('allocates buffers with byteOffsets', async () => {\n    const data = [-0.5, 0.5, 3.14];\n    const buffer = new ArrayBuffer(32);\n    const view = new Float32Array(buffer, 8, data.length);\n\n    // Write values to buffer.\n    for (let i = 0; i < data.length; ++i) {\n      view[i] = data[i];\n    }\n\n    const t = tf.tensor(view);\n    // Tensor values should match.\n    test_util.expectArraysClose(await t.data(), view);\n  });\n});\n\ndescribeWithFlags('wasm init', BROWSER_ENVS, () => {\n  beforeEach(() => {\n    registerBackend('wasm-test', async () => {\n      const {wasm} = await init();\n      return new BackendWasm(wasm);\n    }, 100);\n\n    // Silences backend registration warnings.\n    spyOn(console, 'warn');\n    spyOn(console, 'log');\n  });\n\n  afterEach(() => {\n    resetWasmPath();\n    removeBackend('wasm-test');\n  });\n\n  it('backend init fails when the path is invalid', async () => {\n    setWasmPath('invalid/path');\n    let wasmPath: string;\n    const realFetch = fetch;\n    spyOn(self, 'fetch').and.callFake((path: string) => {\n      wasmPath = path;\n      return realFetch(path);\n    });\n    expect(await tf.setBackend('wasm-test')).toBe(false);\n    expect(wasmPath).toBe('invalid/path');\n  });\n\n  it('backend init fails when setWasmPaths is called with ' +\n         'an invalid prefix',\n     async () => {\n       setWasmPaths('invalid/prefix/');\n       let wasmPath: string;\n       const realFetch = fetch;\n       spyOn(self, 'fetch').and.callFake((path: string) => {\n         wasmPath = path;\n         return realFetch(path);\n       });\n       expect(await tf.setBackend('wasm-test')).toBe(false);\n       expect(wasmPath).toContain('invalid/prefix');\n     });\n\n  it('backend init fails when setWasmPaths is called with ' +\n         'an invalid fileMap',\n     async () => {\n       setWasmPaths({\n         'tfjs-backend-wasm.wasm': 'invalid/path',\n         'tfjs-backend-wasm-simd.wasm': 'invalid/path',\n         'tfjs-backend-wasm-threaded-simd.wasm': 'invalid/path'\n       });\n       let wasmPathPrefix: string;\n       const realFetch = fetch;\n       spyOn(self, 'fetch').and.callFake((path: string) => {\n         wasmPathPrefix = path;\n         return realFetch(path);\n       });\n       expect(await tf.setBackend('wasm-test')).toBe(false);\n       expect(wasmPathPrefix).toBe('invalid/path');\n     });\n\n  it('setWasmPaths throws error when called without specifying a path for ' +\n         'each binary',\n     async () => {\n       expect(() => {\n         setWasmPaths({\n           'tfjs-backend-wasm.wasm': '/base/wasm-out/tfjs-backend-wasm.wasm'\n         });\n       }).toThrow();\n     });\n\n  it('backend init works when the path is valid and use platform fetch',\n     async () => {\n       const usePlatformFetch = true;\n       const validPrefix = '/base/wasm-out/';\n       setWasmPaths(validPrefix, usePlatformFetch);\n       let wasmPath: string;\n       const realFetch = util.fetch;\n       spyOn(util, 'fetch').and.callFake((path: string) => {\n         wasmPath = path;\n         return realFetch(path);\n       });\n       expect(await tf.setBackend('wasm-test')).toBe(true);\n       const validPaths = new Set([\n         validPrefix + 'tfjs-backend-wasm.wasm',\n         validPrefix + 'tfjs-backend-wasm-simd.wasm',\n         validPrefix + 'tfjs-backend-wasm-threaded-simd.wasm',\n       ]);\n       expect(validPaths).toContain(wasmPath);\n     });\n\n  it('backend init works when the wasm paths overrides map is valid and ' +\n         'using platform fetch',\n     async () => {\n       const usePlatformFetch = true;\n       const validPrefix = '/base/wasm-out/';\n       setWasmPaths(\n           {\n             'tfjs-backend-wasm.wasm': '/base/wasm-out/tfjs-backend-wasm.wasm',\n             'tfjs-backend-wasm-simd.wasm':\n                 '/base/wasm-out/tfjs-backend-wasm-simd.wasm',\n             'tfjs-backend-wasm-threaded-simd.wasm':\n                 '/base/wasm-out/tfjs-backend-wasm-threaded-simd.wasm'\n           },\n           usePlatformFetch);\n       let wasmPath: string;\n       const realFetch = util.fetch;\n       spyOn(util, 'fetch').and.callFake((path: string) => {\n         wasmPath = path;\n         return realFetch(path);\n       });\n       expect(await tf.setBackend('wasm-test')).toBe(true);\n       const validPaths = new Set([\n         validPrefix + 'tfjs-backend-wasm.wasm',\n         validPrefix + 'tfjs-backend-wasm-simd.wasm',\n         validPrefix + 'tfjs-backend-wasm-threaded-simd.wasm',\n       ]);\n       expect(validPaths).toContain(wasmPath);\n     });\n\n  it('backend init works when the path is valid and use platform fetch',\n     async () => {\n       const usePlatformFetch = true;\n       const validPath = '/base/wasm-out/tfjs-backend-wasm.wasm';\n       setWasmPath(validPath, usePlatformFetch);\n       let wasmPath: string;\n       const realFetch = util.fetch;\n       spyOn(util, 'fetch').and.callFake((path: string) => {\n         wasmPath = path;\n         return realFetch(path);\n       });\n       expect(await tf.setBackend('wasm-test')).toBe(true);\n       expect(wasmPath).toBe(validPath);\n     });\n\n  // Disabling this test because it intermittently times out on CI.\n  // tslint:disable-next-line: ban\n  xit('backend init fails when the path is invalid and use platform fetch',\n      async () => {\n        const usePlatformFetch = true;\n        setWasmPath('invalid/path', usePlatformFetch);\n        let wasmPath: string;\n        const realFetch = util.fetch;\n        spyOn(util, 'fetch').and.callFake((path: string) => {\n          wasmPath = path;\n          return realFetch(path);\n        });\n        expect(await tf.setBackend('wasm-test')).toBe(false);\n        expect(wasmPath).toBe('invalid/path');\n      });\n\n  it('backend init succeeds with default path', async () => {\n    expect(await tf.setBackend('wasm-test')).toBe(true);\n  });\n\n  it('setWasmPath called too late', async () => {\n    // Set an invalid path.\n    setWasmPath('invalid/path');\n    await tf.setBackend('wasm-test');\n\n    // Setting the path too late.\n    expect(() => setWasmPath('too/late'))\n        .toThrowError(/The WASM backend was already initialized. Make sure/);\n  });\n});\n"]}