{"version":3,"file":"TopK.js","sourceRoot":"","sources":["../../src/kernels/TopK.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAuC,IAAI,EAAwB,MAAM,uBAAuB,CAAC;AAGxG,OAAO,EAAC,QAAQ,EAAC,MAAM,SAAS,CAAC;AAEjC,IAAI,QAG6B,CAAC;AAElC,SAAS,KAAK,CAAC,OAAoB;IACjC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE;QACnD,QAAQ;QACR,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,QAAQ;QACR,MAAM;QACN,QAAQ;QACR,QAAQ;KACT,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,MAAM,IAAI,GAEmB,CAAC,EAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAC,EAAE,EAAE;IACvD,MAAM,EAAC,CAAC,EAAC,GAAG,MAAM,CAAC;IACnB,MAAM,EAAC,CAAC,EAAE,MAAM,EAAC,GAAG,KAAK,CAAC;IAE1B,MAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;IAC/C,MAAM,WAAW,GAAG,IAAI,UAAU,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC;IACnE,MAAM,WAAW,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACpC,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IACxC,MAAM,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;IAC3D,MAAM,WAAW,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;IAC/D,MAAM,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAC5D,MAAM,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;IAEjE,QAAQ,CACJ,GAAG,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,MAAM,EAC9D,WAAW,EAAE,YAAY,CAAC,CAAC;IAE/B,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AACjC,CAAC,CAAC;AAEV,MAAM,CAAC,MAAM,UAAU,GAAiB;IACtC,UAAU,EAAE,IAAI;IAChB,WAAW,EAAE,MAAM;IACnB,SAAS,EAAE,KAAK;IAChB,UAAU,EAAE,IAAwB;CACrC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, TopK, TopKAttrs, TopKInputs} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\nimport {CppDType} from './types';\n\nlet wasmTopK: (\n    xId: number, xShapeBytes: Uint8Array, xShapeLength: number,\n    xDtype: CppDType, k: number, sorted: boolean, outValuesId: number,\n    outIndicesId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmTopK = backend.wasm.cwrap(TopK, null /* void */, [\n    'number',  // xId\n    'array',   // x.shape\n    'number',  // x.shape.length\n    'number',  // x.dtype\n    'number',  // k\n    'bool',    // sorted\n    'number',  // outValuesId\n    'number',  // outIndicesId\n  ]);\n}\n\nexport const topk:\n    (args: {inputs: TopKInputs, backend: BackendWasm, attrs: TopKAttrs}) =>\n        TensorInfo[] | TensorInfo = ({inputs, backend, attrs}) => {\n          const {x} = inputs;\n          const {k, sorted} = attrs;\n\n          const xId = backend.dataIdMap.get(x.dataId).id;\n          const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n          const outputShape = x.shape.slice();\n          outputShape[outputShape.length - 1] = k;\n          const outValues = backend.makeOutput(outputShape, x.dtype);\n          const outValuesId = backend.dataIdMap.get(outValues.dataId).id;\n          const outIndices = backend.makeOutput(outputShape, 'int32');\n          const outIndicesId = backend.dataIdMap.get(outIndices.dataId).id;\n\n          wasmTopK(\n              xId, xShapeBytes, x.shape.length, CppDType[x.dtype], k, sorted,\n              outValuesId, outIndicesId);\n\n          return [outValues, outIndices];\n        };\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: topk as {} as KernelFunc,\n};\n"]}