{"version":3,"file":"AvgPool.js","sourceRoot":"","sources":["../../src/kernels/AvgPool.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, Tensor4D} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmAvgPool: (\n    xId: number, batchSize: number, inputHeight: number, inputWidth: number,\n    filterHeight: number, filterWidth: number, padTop: number, padRight: number,\n    padBottom: number, padLeft: number, strideHeight: number,\n    strideWidth: number, channels: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmAvgPool = backend.wasm.cwrap(AvgPool, null /* void */, [\n    'number',  // xId\n    'number',  // batchSize\n    'number',  // inputHeight\n    'number',  // inputWidth\n    'number',  // filterHeight\n    'number',  // filterWidth\n    'number',  // padTop\n    'number',  // padRight\n    'number',  // padBottom\n    'number',  // padLeft\n    'number',  // strideHeight\n    'number',  // strideWidth\n    'number',  // channels\n    'number',  // outId\n  ]);\n}\n\nfunction avgPool(\n    args: {inputs: AvgPoolInputs, backend: BackendWasm, attrs: AvgPoolAttrs}) {\n  const {inputs, attrs, backend} = args;\n\n  const x = inputs.x as Tensor4D;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const channels = convInfo.inChannels;\n\n  if (convInfo.dataFormat !== 'channelsLast') {\n    throw new Error(\n        `wasm backend does not support dataFormat:'` +\n        `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n\n  if (convInfo.dilationWidth !== 1 || convInfo.dilationHeight !== 1) {\n    throw new Error(\n        `was backend only supports average pooling with dilation = [1, 1], ` +\n        `got [${convInfo.dilationHeight}, ${convInfo.dilationWidth}].`);\n  }\n\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  wasmAvgPool(\n      xId, x.shape[0], x.shape[1], x.shape[2], filterHeight, filterWidth,\n      padTop, padRight, padBottom, padLeft, strideHeight, strideWidth, channels,\n      outId);\n  return out;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: avgPool as {} as KernelFunc\n};\n"]}