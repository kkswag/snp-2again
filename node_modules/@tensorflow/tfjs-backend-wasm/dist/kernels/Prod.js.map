{"version":3,"file":"Prod.js","sourceRoot":"","sources":["../../src/kernels/Prod.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {permuteAxesAndTranspose} from './kernel_utils';\n\nimport {CppDType} from './types';\n\nlet wasmProd: (\n    xId: number, reduceSize: number,\n    dtype: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmProd = backend.wasm.cwrap(Prod, null /*void*/, [\n    'number',\n    'number',\n    'number',\n    'number'\n  ]);\n}\n\nfunction prod(args: {\n  backend: BackendWasm,\n  inputs: ProdInputs,\n  attrs: ProdAttrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {axis, keepDims} = attrs;\n  const {x} = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input = x;\n\n  const {transposed, axes, originalAxes, inputWasTransposed} =\n      permuteAxesAndTranspose(x, axis, backend);\n\n  let reductionAxes = axes;\n  if (inputWasTransposed) {\n    const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n    if (transposedId !== xId) {\n      // transpose was not a no-op. We will need to dispose of this\n      // once we are done.\n      input = transposed;\n      inputId = transposedId;\n      reductionAxes = backend_util.getInnerMostAxes(\n          reductionAxes.length, input.shape.length);\n    }\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'prod', reductionAxes, input.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(input.shape, reductionAxes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const out = backend.makeOutput(outShape, input.dtype);\n  if (util.sizeFromShape(input.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmProd(inputId, reduceSize, CppDType[out.dtype], outId);\n  }\n\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n\n  return out;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: prod as {} as KernelFunc\n};\n"]}