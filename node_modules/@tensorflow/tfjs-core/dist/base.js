/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// base.ts is tfjs-core without auto registration of things like flags,
// gradients, chained ops or the opHandler. See base_side_effects.ts for parts
// tfjs core that are required side effects.
/**
 * @fileoverview
 * @suppress {partialAlias} Optimization disabled due to passing the module
 * object into a function below:
 *
 *   import * as ops from './ops/ops';
 *   setOpHandler(ops);
 */
// Serialization.
import * as io from './io/io';
import * as math from './math';
import * as browser from './ops/browser';
import * as gather_util from './ops/gather_nd_util';
import * as scatter_util from './ops/scatter_nd_util';
import * as slice_util from './ops/slice_util';
import * as serialization from './serialization';
import * as tensor_util from './tensor_util';
import * as test_util from './test_util';
import * as util from './util';
import { version } from './version';
// Optimizers.
export { AdadeltaOptimizer } from './optimizers/adadelta_optimizer';
export { AdagradOptimizer } from './optimizers/adagrad_optimizer';
export { AdamOptimizer } from './optimizers/adam_optimizer';
export { AdamaxOptimizer } from './optimizers/adamax_optimizer';
export { MomentumOptimizer } from './optimizers/momentum_optimizer';
export { Optimizer } from './optimizers/optimizer';
export { RMSPropOptimizer } from './optimizers/rmsprop_optimizer';
export { SGDOptimizer } from './optimizers/sgd_optimizer';
export { Tensor, TensorBuffer, Variable } from './tensor';
export { Rank, sumOutType, upcastType } from './types';
export * from './ops/ops';
export { Reduction } from './ops/loss_ops_utils';
export * from './train';
export * from './globals';
export * from './kernel_registry';
export { customGrad, grad, grads, valueAndGrad, valueAndGrads, variableGrads } from './gradients';
export { Environment, env, ENV } from './environment';
export { version as version_core };
// Top-level method exports.
export { nextFrame } from './browser_util';
// Second level exports.
import * as backend_util from './backends/backend_util';
import * as device_util from './device_util';
export { browser, io, math, serialization, test_util, util, backend_util, tensor_util, slice_util, gather_util, scatter_util, device_util };
import * as kernel_impls from './backends/kernel_impls';
export { kernel_impls };
// Backend specific.
export { KernelBackend, DataStorage } from './backends/backend';
// Export all kernel names / info.
export * from './kernel_names';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCx1RUFBdUU7QUFDdkUsOEVBQThFO0FBQzlFLDRDQUE0QztBQUU1Qzs7Ozs7OztHQU9HO0FBRUgsaUJBQWlCO0FBQ2pCLE9BQU8sS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQzlCLE9BQU8sS0FBSyxJQUFJLE1BQU0sUUFBUSxDQUFDO0FBQy9CLE9BQU8sS0FBSyxPQUFPLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sS0FBSyxXQUFXLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxLQUFLLFlBQVksTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEtBQUssVUFBVSxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE9BQU8sS0FBSyxhQUFhLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxLQUFLLFdBQVcsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxLQUFLLFNBQVMsTUFBTSxhQUFhLENBQUM7QUFDekMsT0FBTyxLQUFLLElBQUksTUFBTSxRQUFRLENBQUM7QUFDL0IsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUdsQyxjQUFjO0FBQ2QsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDbEUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDaEUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQzFELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUM5RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUNsRSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDakQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDaEUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ3hELE9BQU8sRUFBUyxNQUFNLEVBQW9ELFlBQVksRUFBRSxRQUFRLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFbEgsT0FBTyxFQUErRSxJQUFJLEVBQXdDLFVBQVUsRUFBMEIsVUFBVSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRWpNLGNBQWMsV0FBVyxDQUFDO0FBQzFCLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUUvQyxjQUFjLFNBQVMsQ0FBQztBQUN4QixjQUFjLFdBQVcsQ0FBQztBQUMxQixjQUFjLG1CQUFtQixDQUFDO0FBQ2xDLE9BQU8sRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUdoRyxPQUFPLEVBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHcEQsT0FBTyxFQUFDLE9BQU8sSUFBSSxZQUFZLEVBQUMsQ0FBQztBQUVqQyw0QkFBNEI7QUFDNUIsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXpDLHdCQUF3QjtBQUN4QixPQUFPLEtBQUssWUFBWSxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sS0FBSyxXQUFXLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFDTCxPQUFPLEVBQ1AsRUFBRSxFQUNGLElBQUksRUFDSixhQUFhLEVBQ2IsU0FBUyxFQUNULElBQUksRUFDSixZQUFZLEVBQ1osV0FBVyxFQUNYLFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxFQUNaLFdBQVcsRUFDWixDQUFDO0FBRUYsT0FBTyxLQUFLLFlBQVksTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsWUFBWSxFQUFDLENBQUM7QUFDdEIsb0JBQW9CO0FBQ3BCLE9BQU8sRUFBQyxhQUFhLEVBQWdDLFdBQVcsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRTVGLGtDQUFrQztBQUNsQyxjQUFjLGdCQUFnQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG4vLyBiYXNlLnRzIGlzIHRmanMtY29yZSB3aXRob3V0IGF1dG8gcmVnaXN0cmF0aW9uIG9mIHRoaW5ncyBsaWtlIGZsYWdzLFxuLy8gZ3JhZGllbnRzLCBjaGFpbmVkIG9wcyBvciB0aGUgb3BIYW5kbGVyLiBTZWUgYmFzZV9zaWRlX2VmZmVjdHMudHMgZm9yIHBhcnRzXG4vLyB0ZmpzIGNvcmUgdGhhdCBhcmUgcmVxdWlyZWQgc2lkZSBlZmZlY3RzLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIEBzdXBwcmVzcyB7cGFydGlhbEFsaWFzfSBPcHRpbWl6YXRpb24gZGlzYWJsZWQgZHVlIHRvIHBhc3NpbmcgdGhlIG1vZHVsZVxuICogb2JqZWN0IGludG8gYSBmdW5jdGlvbiBiZWxvdzpcbiAqXG4gKiAgIGltcG9ydCAqIGFzIG9wcyBmcm9tICcuL29wcy9vcHMnO1xuICogICBzZXRPcEhhbmRsZXIob3BzKTtcbiAqL1xuXG4vLyBTZXJpYWxpemF0aW9uLlxuaW1wb3J0ICogYXMgaW8gZnJvbSAnLi9pby9pbyc7XG5pbXBvcnQgKiBhcyBtYXRoIGZyb20gJy4vbWF0aCc7XG5pbXBvcnQgKiBhcyBicm93c2VyIGZyb20gJy4vb3BzL2Jyb3dzZXInO1xuaW1wb3J0ICogYXMgZ2F0aGVyX3V0aWwgZnJvbSAnLi9vcHMvZ2F0aGVyX25kX3V0aWwnO1xuaW1wb3J0ICogYXMgc2NhdHRlcl91dGlsIGZyb20gJy4vb3BzL3NjYXR0ZXJfbmRfdXRpbCc7XG5pbXBvcnQgKiBhcyBzbGljZV91dGlsIGZyb20gJy4vb3BzL3NsaWNlX3V0aWwnO1xuaW1wb3J0ICogYXMgc2VyaWFsaXphdGlvbiBmcm9tICcuL3NlcmlhbGl6YXRpb24nO1xuaW1wb3J0ICogYXMgdGVuc29yX3V0aWwgZnJvbSAnLi90ZW5zb3JfdXRpbCc7XG5pbXBvcnQgKiBhcyB0ZXN0X3V0aWwgZnJvbSAnLi90ZXN0X3V0aWwnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHt2ZXJzaW9ufSBmcm9tICcuL3ZlcnNpb24nO1xuXG5leHBvcnQge0luZmVyZW5jZU1vZGVsLCBNZXRhR3JhcGgsIE1ldGFHcmFwaEluZm8sIE1vZGVsUHJlZGljdENvbmZpZywgTW9kZWxUZW5zb3JJbmZvLCBTYXZlZE1vZGVsVGVuc29ySW5mbywgU2lnbmF0dXJlRGVmLCBTaWduYXR1cmVEZWZFbnRyeSwgU2lnbmF0dXJlRGVmSW5mb30gZnJvbSAnLi9tb2RlbF90eXBlcyc7XG4vLyBPcHRpbWl6ZXJzLlxuZXhwb3J0IHtBZGFkZWx0YU9wdGltaXplcn0gZnJvbSAnLi9vcHRpbWl6ZXJzL2FkYWRlbHRhX29wdGltaXplcic7XG5leHBvcnQge0FkYWdyYWRPcHRpbWl6ZXJ9IGZyb20gJy4vb3B0aW1pemVycy9hZGFncmFkX29wdGltaXplcic7XG5leHBvcnQge0FkYW1PcHRpbWl6ZXJ9IGZyb20gJy4vb3B0aW1pemVycy9hZGFtX29wdGltaXplcic7XG5leHBvcnQge0FkYW1heE9wdGltaXplcn0gZnJvbSAnLi9vcHRpbWl6ZXJzL2FkYW1heF9vcHRpbWl6ZXInO1xuZXhwb3J0IHtNb21lbnR1bU9wdGltaXplcn0gZnJvbSAnLi9vcHRpbWl6ZXJzL21vbWVudHVtX29wdGltaXplcic7XG5leHBvcnQge09wdGltaXplcn0gZnJvbSAnLi9vcHRpbWl6ZXJzL29wdGltaXplcic7XG5leHBvcnQge1JNU1Byb3BPcHRpbWl6ZXJ9IGZyb20gJy4vb3B0aW1pemVycy9ybXNwcm9wX29wdGltaXplcic7XG5leHBvcnQge1NHRE9wdGltaXplcn0gZnJvbSAnLi9vcHRpbWl6ZXJzL3NnZF9vcHRpbWl6ZXInO1xuZXhwb3J0IHtTY2FsYXIsIFRlbnNvciwgVGVuc29yMUQsIFRlbnNvcjJELCBUZW5zb3IzRCwgVGVuc29yNEQsIFRlbnNvcjVELCBUZW5zb3JCdWZmZXIsIFZhcmlhYmxlfSBmcm9tICcuL3RlbnNvcic7XG5leHBvcnQge0dyYWRTYXZlRnVuYywgTmFtZWRUZW5zb3JNYXAsIFRlbnNvckNvbnRhaW5lciwgVGVuc29yQ29udGFpbmVyQXJyYXksIFRlbnNvckNvbnRhaW5lck9iamVjdH0gZnJvbSAnLi90ZW5zb3JfdHlwZXMnO1xuZXhwb3J0IHtCYWNrZW5kVmFsdWVzLCBEYXRhVHlwZSwgRGF0YVR5cGVNYXAsIERhdGFWYWx1ZXMsIE51bWVyaWNEYXRhVHlwZSwgUGl4ZWxEYXRhLCBSYW5rLCBSZWN1cnNpdmVBcnJheSwgU2NhbGFyTGlrZSwgU2hhcGVNYXAsIHN1bU91dFR5cGUsIFRlbnNvckxpa2UsIFR5cGVkQXJyYXksIHVwY2FzdFR5cGV9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgKiBmcm9tICcuL29wcy9vcHMnO1xuZXhwb3J0IHtSZWR1Y3Rpb259IGZyb20gJy4vb3BzL2xvc3Nfb3BzX3V0aWxzJztcblxuZXhwb3J0ICogZnJvbSAnLi90cmFpbic7XG5leHBvcnQgKiBmcm9tICcuL2dsb2JhbHMnO1xuZXhwb3J0ICogZnJvbSAnLi9rZXJuZWxfcmVnaXN0cnknO1xuZXhwb3J0IHtjdXN0b21HcmFkLCBncmFkLCBncmFkcywgdmFsdWVBbmRHcmFkLCB2YWx1ZUFuZEdyYWRzLCB2YXJpYWJsZUdyYWRzfSBmcm9tICcuL2dyYWRpZW50cyc7XG5cbmV4cG9ydCB7VGltaW5nSW5mbywgTWVtb3J5SW5mbywgRm9yd2FyZEZ1bmN9IGZyb20gJy4vZW5naW5lJztcbmV4cG9ydCB7RW52aXJvbm1lbnQsIGVudiwgRU5WfSBmcm9tICcuL2Vudmlyb25tZW50JztcbmV4cG9ydCB7UGxhdGZvcm19IGZyb20gJy4vcGxhdGZvcm1zL3BsYXRmb3JtJztcblxuZXhwb3J0IHt2ZXJzaW9uIGFzIHZlcnNpb25fY29yZX07XG5cbi8vIFRvcC1sZXZlbCBtZXRob2QgZXhwb3J0cy5cbmV4cG9ydCB7bmV4dEZyYW1lfSBmcm9tICcuL2Jyb3dzZXJfdXRpbCc7XG5cbi8vIFNlY29uZCBsZXZlbCBleHBvcnRzLlxuaW1wb3J0ICogYXMgYmFja2VuZF91dGlsIGZyb20gJy4vYmFja2VuZHMvYmFja2VuZF91dGlsJztcbmltcG9ydCAqIGFzIGRldmljZV91dGlsIGZyb20gJy4vZGV2aWNlX3V0aWwnO1xuZXhwb3J0IHtcbiAgYnJvd3NlcixcbiAgaW8sXG4gIG1hdGgsXG4gIHNlcmlhbGl6YXRpb24sXG4gIHRlc3RfdXRpbCxcbiAgdXRpbCxcbiAgYmFja2VuZF91dGlsLFxuICB0ZW5zb3JfdXRpbCxcbiAgc2xpY2VfdXRpbCxcbiAgZ2F0aGVyX3V0aWwsXG4gIHNjYXR0ZXJfdXRpbCxcbiAgZGV2aWNlX3V0aWxcbn07XG5cbmltcG9ydCAqIGFzIGtlcm5lbF9pbXBscyBmcm9tICcuL2JhY2tlbmRzL2tlcm5lbF9pbXBscyc7XG5leHBvcnQge2tlcm5lbF9pbXBsc307XG4vLyBCYWNrZW5kIHNwZWNpZmljLlxuZXhwb3J0IHtLZXJuZWxCYWNrZW5kLCBCYWNrZW5kVGltaW5nSW5mbywgRGF0YU1vdmVyLCBEYXRhU3RvcmFnZX0gZnJvbSAnLi9iYWNrZW5kcy9iYWNrZW5kJztcblxuLy8gRXhwb3J0IGFsbCBrZXJuZWwgbmFtZXMgLyBpbmZvLlxuZXhwb3J0ICogZnJvbSAnLi9rZXJuZWxfbmFtZXMnO1xuIl19