{"version":3,"file":"shader_compiler.js","sourceRoot":"","sources":["../src/shader_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n"]}